

/*
Abstracts

The abstracts/ folder gathers all Sass tools and helpers used across the project. Every global variable, function, mixin and placeholder should be put in here.

Styleguide abstracts
*/
@import '1.abstracts/functions';
@import '1.abstracts/variables';
@import '1.abstracts/variables-hamburger';
@import '1.abstracts/get';

/* - mixins*/
/*/////////////////////////////////////////*/
@import '1.abstracts/mixins/center';
@import '1.abstracts/mixins/clearfix';
@import '1.abstracts/mixins/container';
@import '1.abstracts/mixins/focuspoint';
@import '1.abstracts/mixins/input-placeholder';
@import '1.abstracts/mixins/intrinsic';
@import '1.abstracts/mixins/ios';
@import '1.abstracts/mixins/last-row';
@import '1.abstracts/mixins/letter-spacing';
@import '1.abstracts/mixins/lost';
@import '1.abstracts/mixins/padding';
@import '1.abstracts/mixins/responsive';
@import '1.abstracts/mixins/text-truncate';

/* - utils*/
@import '1.abstracts/utils/grid-helper';
@import '1.abstracts/utils/bp-helper';

/* Vendors*/
/*/////////////////////////////////////////*/

/* - external*/
@import '../../node_modules/normalize-scss/sass/_normalize';
@import '../../node_modules/include-media/dist/_include-media';
@import '../../node_modules/aos/src/sass/aos';
@import '../../node_modules/hamburgers/_sass/hamburgers/hamburgers';
@import '../../node_modules/swiper/dist/css/swiper';
@import '../../node_modules/include-media-export/dist/_include-media-export';

/*
Base

The base/ folder holds what we might call the boilerplate code for the project. In there, you might find the reset file, some typographic rules, and probably a stylesheet defining some standard styles for commonly used HTML elements.

Styleguide base
*/

@import '2.base/reset';
@import '2.base/base';
@import '2.base/fonts';
@import '2.base/typography/heading';
@import '2.base/typography/text';
@import '2.base/icons';
@import '2.base/animations';
@import '2.base/transitions';
@import '2.base/grid/container';
@import '2.base/grid/index';

/*
Elements

Explicitly named designed pieces of UI. The cosmetic layer, includes more specific styling instructions.

Styleguide: elements
*/
@import '3.elements/btn';
@import '3.elements/list';

// form
@import '3.elements/form/base';
@import '3.elements/form/label';
@import '3.elements/form/input';
@import '3.elements/form/checkbox';
@import '3.elements/form/radio';
@import '3.elements/form/select';
@import '3.elements/form/input-note';
@import '3.elements/form/input-status';
@import '3.elements/form/control';
@import '3.elements/form/toggle';

/*
Components

For smaller components, there is the components/ folder. While layout/ is macro (defining the global wireframe), components/ is more focused on widgets. It contains all kind of specific modules like a slider, a loader, a widget, and basically anything along those lines.

Styleguide: components
*/
@import '4.components/modal';
@import '4.components/slider-images';

/*
Layout

The layout/ folder contains everything that takes part in laying out the site or application. This folder could have stylesheets for the main parts of the site (header, footer, navigation, sidebar…), the grid system or even CSS styles for all the forms.

Styleguide: layout
*/

@import '5.layout/footer';
@import '5.layout/header';
@import '5.layout/main';
@import '5.layout/nav-canvas';
@import '5.layout/wrapper';

/*
Pages

If you have page-specific styles, it is better to put them in a pages/ folder, in a file named after the page. For instance, it’s not uncommon to have very specific styles for the home page hence the need for a _home.scss file in pages/.

Styleguide: pages
*/
@import '6.pages//404';

/*
Utility 

Utility classes are helper classes that perform one thing extremely well. They do it so well, they override everything else. As such, they often only contain one property, and they include the !important declaration.

Styleguide utility
*/
@import '7.utility/text';

// Init

body.is-dev {
    @include bp-helper();
}

@include grid-helper();
